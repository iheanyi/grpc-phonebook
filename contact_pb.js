/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.contact.Contact', null, global);
goog.exportSymbol('proto.contact.PhoneNumber', null, global);
goog.exportSymbol('proto.contact.PhoneNumber.PhoneType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contact.Contact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.contact.Contact.repeatedFields_, null);
};
goog.inherits(proto.contact.Contact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contact.Contact.displayName = 'proto.contact.Contact';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.contact.Contact.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contact.Contact.prototype.toObject = function(opt_includeInstance) {
  return proto.contact.Contact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contact.Contact} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contact.Contact.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phoneNumbersList: jspb.Message.toObjectList(msg.getPhoneNumbersList(),
    proto.contact.PhoneNumber.toObject, includeInstance),
    home: (f = msg.getHome()) && proto.contact.PhoneNumber.toObject(includeInstance, f),
    mobile: (f = msg.getMobile()) && proto.contact.PhoneNumber.toObject(includeInstance, f),
    work: (f = msg.getWork()) && proto.contact.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contact.Contact}
 */
proto.contact.Contact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contact.Contact;
  return proto.contact.Contact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contact.Contact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contact.Contact}
 */
proto.contact.Contact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = new proto.contact.PhoneNumber;
      reader.readMessage(value,proto.contact.PhoneNumber.deserializeBinaryFromReader);
      msg.addPhoneNumbers(value);
      break;
    case 4:
      var value = new proto.contact.PhoneNumber;
      reader.readMessage(value,proto.contact.PhoneNumber.deserializeBinaryFromReader);
      msg.setHome(value);
      break;
    case 5:
      var value = new proto.contact.PhoneNumber;
      reader.readMessage(value,proto.contact.PhoneNumber.deserializeBinaryFromReader);
      msg.setMobile(value);
      break;
    case 6:
      var value = new proto.contact.PhoneNumber;
      reader.readMessage(value,proto.contact.PhoneNumber.deserializeBinaryFromReader);
      msg.setWork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contact.Contact} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contact.Contact.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contact.Contact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contact.Contact.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPhoneNumbersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.contact.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = this.getHome();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.contact.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = this.getMobile();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.contact.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = this.getWork();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.contact.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.contact.Contact.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contact.Contact.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.contact.Contact.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.contact.Contact.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated PhoneNumber phone_numbers = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.contact.PhoneNumber>}
 */
proto.contact.Contact.prototype.getPhoneNumbersList = function() {
  return /** @type{!Array.<!proto.contact.PhoneNumber>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.contact.PhoneNumber, 3));
};


/** @param {!Array.<!proto.contact.PhoneNumber>} value */
proto.contact.Contact.prototype.setPhoneNumbersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.contact.PhoneNumber=} opt_value
 * @param {number=} opt_index
 * @return {!proto.contact.PhoneNumber}
 */
proto.contact.Contact.prototype.addPhoneNumbers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.contact.PhoneNumber, opt_index);
};


proto.contact.Contact.prototype.clearPhoneNumbersList = function() {
  this.setPhoneNumbersList([]);
};


/**
 * optional PhoneNumber home = 4;
 * @return {?proto.contact.PhoneNumber}
 */
proto.contact.Contact.prototype.getHome = function() {
  return /** @type{?proto.contact.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.contact.PhoneNumber, 4));
};


/** @param {?proto.contact.PhoneNumber|undefined} value */
proto.contact.Contact.prototype.setHome = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.contact.Contact.prototype.clearHome = function() {
  this.setHome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contact.Contact.prototype.hasHome = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PhoneNumber mobile = 5;
 * @return {?proto.contact.PhoneNumber}
 */
proto.contact.Contact.prototype.getMobile = function() {
  return /** @type{?proto.contact.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.contact.PhoneNumber, 5));
};


/** @param {?proto.contact.PhoneNumber|undefined} value */
proto.contact.Contact.prototype.setMobile = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.contact.Contact.prototype.clearMobile = function() {
  this.setMobile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contact.Contact.prototype.hasMobile = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PhoneNumber work = 6;
 * @return {?proto.contact.PhoneNumber}
 */
proto.contact.Contact.prototype.getWork = function() {
  return /** @type{?proto.contact.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.contact.PhoneNumber, 6));
};


/** @param {?proto.contact.PhoneNumber|undefined} value */
proto.contact.Contact.prototype.setWork = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.contact.Contact.prototype.clearWork = function() {
  this.setWork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.contact.Contact.prototype.hasWork = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.contact.PhoneNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.contact.PhoneNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.contact.PhoneNumber.displayName = 'proto.contact.PhoneNumber';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.contact.PhoneNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.contact.PhoneNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.contact.PhoneNumber} msg The msg instance to transform.
 * @return {!Object}
 */
proto.contact.PhoneNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.contact.PhoneNumber}
 */
proto.contact.PhoneNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.contact.PhoneNumber;
  return proto.contact.PhoneNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.contact.PhoneNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.contact.PhoneNumber}
 */
proto.contact.PhoneNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {!proto.contact.PhoneNumber.PhoneType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.contact.PhoneNumber} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.contact.PhoneNumber.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.contact.PhoneNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.contact.PhoneNumber.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string number = 1;
 * @return {string}
 */
proto.contact.PhoneNumber.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.contact.PhoneNumber.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional PhoneType type = 2;
 * @return {!proto.contact.PhoneNumber.PhoneType}
 */
proto.contact.PhoneNumber.prototype.getType = function() {
  return /** @type {!proto.contact.PhoneNumber.PhoneType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.contact.PhoneNumber.PhoneType} value */
proto.contact.PhoneNumber.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.contact.PhoneNumber.PhoneType = {
  MOBILE: 0,
  HOME: 1,
  WORK: 2
};

goog.object.extend(exports, proto.contact);
